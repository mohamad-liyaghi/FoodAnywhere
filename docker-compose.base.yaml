services:
  backend:
    restart: on-failure
    command: sh ./docker/scripts/backend.sh
    container_name: food-anywhere-backend
    ports:
      - "8000:8000"
    volumes:
      - .:/src
    networks:
      - main
    depends_on:
        postgres:
            condition: service_healthy
        redis:
            condition: service_healthy
  celery:
    restart: on-failure
    container_name: food-anywhere-celery
    command: sh ./docker/scripts/celery.sh
    volumes:
      - .:/src
      - ./logs/celery:/var/log/celery
    networks:
      - main
    depends_on:
        backend:
            condition: service_started
  celery-beat:
    restart: on-failure
    container_name: food-anywhere-celery-beat
    command: sh ./docker/scripts/celery-beat.sh
    volumes:
      - .:/src
      - ./logs/celery-beat/:/var/log/celery-beat/
    networks:
      - main
    depends_on:
      backend:
        condition: service_started
  postgres:
    restart: on-failure
    container_name: food-anywhere-postgres
    image: postgis/postgis:16-3.4
    expose:
      - "5432"
    volumes:
      - food_anywhere_postgres_data:/var/lib/postgresql/data/
      - ./docker/scripts/postgres.sh:/docker-entrypoint-initdb.d/entrypoint.sh
    networks:
      - main
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 2s
      timeout: 5s
      retries: 5
  redis:
    restart: on-failure
    container_name: food-anywhere-redis
    image: redis:6.2-alpine
    expose:
      - "6379"
    networks:
      - main
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 2s
      timeout: 5s
      retries: 5
  smtp4dev:
    image: rnwood/smtp4dev:v3
    restart: always
    container_name: food-anywhere-smtp4dev
    ports:
      - "5000:80"
    expose:
      - "25"
    networks:
      - main
  promtail:
    image: grafana/promtail
    container_name: food-anywhere-promtail
    volumes:
      - ./promtail/config.yaml:/etc/promtail/promtail.yaml
      - ./logs/:/var/log/
    command: --config.file=/etc/promtail/promtail.yaml
    depends_on:
      - backend
    networks:
      - main
  loki:
    image: grafana/loki
    container_name: food-anywhere-loki
    ports:
      - "3100:3100"
    depends_on:
      - promtail
    networks:
      - main
  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: food-anywhere-node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - food_anywhere_node_exporter_data:/host
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - 9100
    networks:
      - main
  prometheus:
    image: prom/prometheus
    container_name: food-anywhere-prometheus
    volumes:
      - ./prometheus/config.yaml:/etc/prometheus/prometheus.yml
      - food_anywhere_prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - 9090:9090
    depends_on:
      - backend
    networks:
      - main
  grafana:
    image: grafana/grafana
    container_name: food-anywhere-grafana
    ports:
      - 3000:3000
    depends_on:
      - loki
    networks:
      - main
    volumes:
      - food_anywhere_grafana_data:/var/lib/grafana

  jaeger:
    image: jaegertracing/all-in-one:1.32
    container_name: food-anywhere-jaeger
    ports:
      - 16686:16686
    networks:
      - main
    volumes:
      - food_anywhere_jaeger_data:/var/lib/jaeger


networks:
  main:
